{
    "version": "https://jsonfeed.org/version/1",
    "title": "我爱次包籽的blog • All posts by \"redis\" tag",
    "description": "这是用hexo+github创建的个人博客，主题使用的是butterfly",
    "home_page_url": "https://tcy12.github.io",
    "items": [
        {
            "id": "https://tcy12.github.io/2022/10/12/spring/",
            "url": "https://tcy12.github.io/2022/10/12/spring/",
            "title": "spring",
            "date_published": "2022-10-12T03:33:36.000Z",
            "content_html": "",
            "tags": [
                "redis"
            ]
        },
        {
            "id": "https://tcy12.github.io/2022/10/04/redis%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/",
            "url": "https://tcy12.github.io/2022/10/04/redis%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/",
            "title": "redis简单介绍",
            "date_published": "2022-10-04T08:43:51.000Z",
            "content_html": "<h3 id=\"1什么是redis\"><a class=\"markdownIt-Anchor\" href=\"#1什么是redis\">#</a> 1. 什么是 Redis</h3>\n<p>Redis (Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD 许可）高性能非关系型（NoSQL）的键值对数据库。Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA 脚本、LRU 驱动事件、多种集群方案。</p>\n<h3 id=\"2redis有哪些优缺点\"><a class=\"markdownIt-Anchor\" href=\"#2redis有哪些优缺点\">#</a> 2.Redis 有哪些优缺点</h3>\n<p>优点:</p>\n<p>2.1 读写性能优异， Redis 能读的速度是 110000 次 /s，写的速度是 81000 次 /s。</p>\n<p>2.2 支持数据持久化，支持 AOF 和 RDB 两种持久化方式。</p>\n<p>2.3 支持事务，Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作合并后的原子性执行。</p>\n<p>2.4 数据结构丰富，除了支持 string 类型的 value 外还支持 hash、set、zset、list 等数据结构。</p>\n<p>2.5 支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</p>\n<p>缺点:</p>\n<p>2.1 数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。</p>\n<p>2.2Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。</p>\n<p>2.3 主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。</p>\n<p>2.4Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</p>\n<p>为什么要用 Redis / 为什么要用缓存</p>\n<h3 id=\"3为什么要用-redis-为什么要用缓存\"><a class=\"markdownIt-Anchor\" href=\"#3为什么要用-redis-为什么要用缓存\">#</a> 3. 为什么要用 Redis / 为什么要用缓存</h3>\n<p>3.1 高性能：</p>\n<p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p>\n<p>3.2 高并发：</p>\n<p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p>\n<h3 id=\"4redis有哪些数据类型\"><a class=\"markdownIt-Anchor\" href=\"#4redis有哪些数据类型\">#</a> 4.Redis 有哪些数据类型</h3>\n<p>Redis 主要有 5 种数据类型，包括 String，List，Set，Zset，Hash，满足大部分的使用要求</p>\n<p><a href=\"http://t.csdn.cn/dhFOX\">http://t.csdn.cn/dhFOX</a></p>\n<h3 id=\"5redis-常见的使用场景\"><a class=\"markdownIt-Anchor\" href=\"#5redis-常见的使用场景\">#</a> 5.Redis 常见的使用场景</h3>\n<p>一、缓存</p>\n<p>作为 Key-Value 形态的内存数据库，Redis 最先会被想到的应用场景便是作为数据缓存。目前这几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力，而使用 Redis 缓存数据也非常简单，只需要通过 string 类型将序列化后的对象存起来即可，不过也有一些需要注意的地方：</p>\n<p>（一）必须保证不同对象的 key 不会重复，并且使 key 尽量短，一般使用类名（表名）加主键拼接而成。</p>\n<p>（二）选择一个优秀的序列化方式也很重要，目的是提高序列化的效率和减少内存占用。</p>\n<p>（三）缓存内容与数据库的一致性，这里一般有两种做法：</p>\n<p>①只在数据库查询后将对象放入缓存，如果对象发生了修改或删除操作，直接清除对应缓存（或设为过期）。</p>\n<p>②在数据库新增和查询后将对象放入缓存，修改后更新缓存，删除后清除对应缓存（或设为过期）。</p>\n<p>二、排行榜</p>\n<p>很多网站目前都有排行榜的应用，如淘宝的年度 / 每日销量榜单、商品按时间的上新排行榜等。利用 Redis 的 zset 结构能实现各种复杂的排行榜应用。比如使用 zset 和一个计算热度的算法便可以轻松打造一个热度排行榜，zrevrangebyscore 可以得到以分数倒序排列的序列，zrank 可以得到一个成员在该排行榜的位置（是分数正序排列时的位置，如果要获取倒序排列时的位置需要用 zcard-zrank）。</p>\n<p>三、计数器</p>\n<p>什么是计数器，如文章的阅读量、微博点赞数、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给 + 1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。我们可以先写入 Redis 再定时同步到数据库，Redis 提供的 incr 命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。</p>\n<p>计数功能应该是最适合 Redis 的使用场景之一了，因为它高频率读写的特征可以完全发挥 Redis 作为内存数据库的高效。在 Redis 的数据结构中，string、hash 和 sorted set 都提供了 incr 方法用于原子性的自增操作，下面举例说明一下它们各自的使用场景：</p>\n<p>（1）如果应用需要显示每天的注册用户数，便可以使用 string 作为计数器，设定一个名为 REGISTERED_COUNT_TODAY 的 key，并在初始化时给它设置一个到凌晨 0 点的过期时间，每当用户注册成功后便使用 incr 命令使该 key 增长 1，同时当每天凌晨 0 点后，这个计数器都会因为 key 过期使值清零。</p>\n<p>（2）每条微博都有点赞数、评论数、转发数和浏览数四条属性，这时用 hash 进行计数会更好，将该计数器的 key 设为 weibo:weibo_id，hash 的 field 为 like_number、comment_number、forward_number 和 view_number，在对应操作后通过 hincrby 使 hash 中的 field 自增。</p>\n<p>（3）如果应用有一个发帖排行榜的功能，选择 sorted set 更合适，将集合的 key 设为 POST_RANK。当用户发帖后，使用 zincrby 将该用户 id 的 score 增长 1。sorted set 会重新进行排序，用户所在排行榜的位置也就会得到实时的更新。</p>\n<p>四、限流</p>\n<p>在某些秒杀活动中，瞬间会有大量的用户请求涌入，而且大概率也会出现同一用户不断刷新页面或者其他操作来发送大量请求的情况，这时候我们就可以采取限流措施。那如何实现限流呢？我们可以利用 Redis 的 incr 方法，以访问者的 ip 和其他信息作为 key，访问一次增加一次计数，当同一用户的访问次数超过我们预先设定的次数则返回提示信息（比如提示用户操作过于频繁，一定时间之后再重新操作等等）。</p>\n<p>五、分布式会话</p>\n<p>集群模式下，在应用不多的情况下一般使用容器自带的 session 复制功能就能满足，当在应用增多且相对复杂的系统中，一般都会搭建以 Redis 等内存数据库为中心的 session 服务，session 不再由容器管理，而是由 session 服务及内存数据库管理。</p>\n<p>————————————————</p>\n<p>版权声明：本文为 CSDN 博主「努力努力再努力 c.」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p>\n<p>原文链接：<a href=\"https://blog.csdn.net/m0_51358164/article/details/125927452\">https://blog.csdn.net/m0_51358164/article/details/125927452</a></p>\n",
            "tags": [
                "redis"
            ]
        }
    ]
}