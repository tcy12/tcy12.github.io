{
    "version": "https://jsonfeed.org/version/1",
    "title": "我爱次包籽的blog • All posts by \"spring\" tag",
    "description": "这是用hexo+github创建的个人博客，主题使用的是butterfly",
    "home_page_url": "https://tcy12.github.io",
    "items": [
        {
            "id": "https://tcy12.github.io/2022/10/08/spring-ioc/",
            "url": "https://tcy12.github.io/2022/10/08/spring-ioc/",
            "title": "spring-ioc",
            "date_published": "2022-10-08T12:34:29.000Z",
            "content_html": "<h2 id=\"1spring-框架\"><a class=\"markdownIt-Anchor\" href=\"#1spring-框架\">#</a> 1.Spring 框架</h2>\n<h3 id=\"111spring-框架概念\"><a class=\"markdownIt-Anchor\" href=\"#111spring-框架概念\">#</a> 1.11<strong>Spring 框架概念</strong></h3>\n<p>Spring 是众多开源 java 项目中的一员，基于分层的 javaEE 应用一站 式轻量级开源框架，主要核心是 IOC（控制反转 / 依赖注入）与 AOP（面向切面）两大技术，实现项目在开发过程中的轻松解耦， 提高项目的开发效率。</p>\n<h3 id=\"112-spring-源码架构\"><a class=\"markdownIt-Anchor\" href=\"#112-spring-源码架构\">#</a> 1.12 <strong>Spring 源码架构</strong></h3>\n<p>1. 核心容器：</p>\n<p>Spring-beans 和 Spring-core 模块是 Spring 框架的核心模块，包含控制反转（Inversion of Control, IoC）和依赖注入（Dependency Injection, DI）, 核心容器提供 Spring 框架的基本功能。</p>\n<p>1…1 核心容器的主要组件是 BeanFactory，工厂模式的实现。BeanFactory 使用控制反转（IOC） 思想将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>\n<p>1.2 Spring 上下文 Spring Context：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</p>\n<p>1.3 Spring-Expression 模块是统一表达式语言（unified EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等。它的语法类似于传统 EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。</p>\n<p>2.Spring-AOP：</p>\n<p>Spring-aop 是 Spring 的另一个核心模块，在 Spring 中，他是以 JVM 的动态代理技术为基础，然后设计出了一系列的 Aop 横切实现，比如前置通知、返回通知、异常通知等。通过其配置管理特性，Spring AOP 模块直接将面向切面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。</p>\n<p>\\3. Spring Data Access (数据访问)：</p>\n<p>由 Spring-jdbc、Spring-tx、Spring-orm、Spring-jms 和 Spring-oxm 5 个模块组成</p>\n<p>3.1Spring-jdbc 模块是 Spring 提供的 JDBC 抽象框架的主要实现模块，用于简化 Spring JDBC。<br>\n3.2Spring-tx 模块是 SpringJDBC 事务控制实现模块。使用 Spring 框 架，它对事务做了很好的封装，通过它的 Aop 配置，可以灵活的 配置在任何一层。                                                                                                                      3.3Spring-Orm 模块是 ORM 框架支持模块，主要集成 hibernate, Java Persistence API (JPA) 和 Java Data Objects (JDO) 用于资 源管理、数据访问对象 (DAO) 的实现和事务策略。                                                            3.4Spring-Jms 模块（Java Messaging Service）能够发送和接受信息。                                                                  3.5Spring-Oxm 模块主要提供一个抽象层以支撑 OXM（OXM 是 Object-to-XML-Mapping 的缩写，它是一个 O/M-mapper，将 java 对象映射成 XML 数据，或者将 XML 数据映射成 java 对 象），例如：JAXB, Castor, XMLBeans, JiBX 和 XStream 等。</p>\n<p><a href=\"http://4.Web\">4.Web</a> 模块：</p>\n<p>由 Spring-web、Spring-webmvc、Spring-websocket 和 Spring-webmvc-portlet 4 个模块组成，Web 上下<br>\n文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p>\n<p>5. 报文发送：</p>\n<p>Spring-messaging 模块。Spring-messaging 是 Spring4 新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用。</p>\n<p>6. 单元测试：</p>\n<p>Spring-test 模块。Spring-test 模块主要为测试提供支持</p>\n<h3 id=\"113spring-框架环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#113spring-框架环境搭建\">#</a> <strong>1.13Spring 框架环境搭建</strong></h3>\n<p>重要的点</p>\n<h4 id=\"1添加-spring-框架的依赖坐标\"><a class=\"markdownIt-Anchor\" href=\"#1添加-spring-框架的依赖坐标\">#</a> 1. 添加 Spring 框架的依赖坐标</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665221631008-f48d52fd-03a1-4bb8-a50b-ff15cdfd214d.png\" alt=\"img\"></p>\n<h4 id=\"2添加spring-配置文件springxml拷贝官-网文档提供的模板内容到-xml-中\"><a class=\"markdownIt-Anchor\" href=\"#2添加spring-配置文件springxml拷贝官-网文档提供的模板内容到-xml-中\">#</a> 2. 添加 Spring 配置文件（spring.xml）, 拷贝官 网文档提供的模板内容到 xml 中。</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665221806317-422fe846-0dd5-4476-8a1a-425e375cd552.png\" alt=\"img\"></p>\n<h4 id=\"3配置-bean-到-xml-中把对应-bean-纳入到-spring-容器来管理\"><a class=\"markdownIt-Anchor\" href=\"#3配置-bean-到-xml-中把对应-bean-纳入到-spring-容器来管理\">#</a> 3. 配置 bean 到 xml 中，把对应 bean 纳入到 Spring 容器来管理</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665221824191-1d929ab7-3a30-4a1d-aab3-175bfe01fdd5.png\" alt=\"img\"></p>\n<h4 id=\"4加载配置文件获取实例化对象\"><a class=\"markdownIt-Anchor\" href=\"#4加载配置文件获取实例化对象\">#</a> 4. 加载配置文件，获取实例化对象</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665221724576-003cc342-8c0f-4853-a5d6-40941868a417.png\" alt=\"img\"></p>\n<h2 id=\"2spring-ioc容器bean对象实例化模拟了解\"><a class=\"markdownIt-Anchor\" href=\"#2spring-ioc容器bean对象实例化模拟了解\">#</a> 2.<strong>Spring IOC 容器 Bean 对象实例化模拟 (了解)</strong></h2>\n<p>2.1 定义 Bean 属性对象</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222324107-34bba415-3105-4921-8cd0-b0c94f649e69.png\" alt=\"img\"></p>\n<p>2.2 添加 dom4j 坐标依赖</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222359384-ae8becde-bd0e-49ce-b0e0-923c60f41b52.png\" alt=\"img\"></p>\n<p>2.3 准备自定义配置文件</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222416685-e1cd3817-715f-49d4-befa-33603c8970e8.png\" alt=\"img\"></p>\n<p>2.4 定义 Bean 工厂接口</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222449100-2f187ec4-f2f7-457a-b9f7-917b373cac3f.png\" alt=\"img\"></p>\n<p>2.5 定义 Bean 接口的实现类</p>\n<p><a href=\"https://www.yuque.com/attachments/yuque/0/2022/java/26248221/1665222643302-eeb3e3a6-9200-4bf5-8871-a8254b75af17.java\">📎MyClassPathXmlApplicationContext.java</a></p>\n<p>2.6 测试自定义 IOC 容器</p>\n<h2 id=\"3-spring-配置文件加载\"><a class=\"markdownIt-Anchor\" href=\"#3-spring-配置文件加载\">#</a> 3. <strong>Spring 配置文件加载</strong></h2>\n<h3 id=\"31根据相对路径加载资源最常用\"><a class=\"markdownIt-Anchor\" href=\"#31根据相对路径加载资源最常用\">#</a> 3.1 根据相对路径加载资源（最常用）</h3>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665223051864-1f4f4e54-6db6-4776-b8e0-ec7e3c9ea99d.png\" alt=\"img\"></p>\n<p>3.2 根据绝对路径加载资源（了解）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665223062429-af64d946-0665-45a6-b73c-4d80d355756a.png\" alt=\"img\"></p>\n<h3 id=\"33-spring-多配置文件加载\"><a class=\"markdownIt-Anchor\" href=\"#33-spring-多配置文件加载\">#</a> 3.3 Spring 多配置文件加载</h3>\n<h4 id=\"331可变参数传入多个文件名\"><a class=\"markdownIt-Anchor\" href=\"#331可变参数传入多个文件名\">#</a> 3.31 可变参数，传入多个文件名</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222985580-8a35e9ad-015e-4260-911f-dcd277854445.png\" alt=\"img\"></p>\n<h4 id=\"332通过总的配置文件import其他配置文件\"><a class=\"markdownIt-Anchor\" href=\"#332通过总的配置文件import其他配置文件\">#</a> 3.32 通过总的配置文件 import 其他配置文件</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222999304-80850582-c1e5-44e5-8890-621d5b974e46.png\" alt=\"img\"></p>\n<h2 id=\"4spring-ioc-容器-bean-对象实例化\"><a class=\"markdownIt-Anchor\" href=\"#4spring-ioc-容器-bean-对象实例化\">#</a> 4.<strong>Spring IOC 容器 Bean 对象实例化</strong></h2>\n<h3 id=\"41构造器实例化\"><a class=\"markdownIt-Anchor\" href=\"#41构造器实例化\">#</a> 4.1 构造器实例化</h3>\n<p>注意：通过默认构造器创建 空构造方法必须存在 否则创建失败</p>\n<h3 id=\"42静态工厂实例化了解\"><a class=\"markdownIt-Anchor\" href=\"#42静态工厂实例化了解\">#</a> 4.2 静态工厂实例化（了解）</h3>\n<h4 id=\"421定义静态工厂类\"><a class=\"markdownIt-Anchor\" href=\"#421定义静态工厂类\">#</a> 4.21 定义静态工厂类</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665226796464-bcc108cc-b735-461b-9ec5-d3a8b9017bf6.png\" alt=\"img\"></p>\n<h4 id=\"422设置配置文件-springxml\"><a class=\"markdownIt-Anchor\" href=\"#422设置配置文件-springxml\">#</a> 4.22 设置配置文件 spring.xml</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665226720396-cfcd0982-12b8-4d05-99f0-add5c7f7e485.png\" alt=\"img\"></p>\n<h4 id=\"423获取实例化对象\"><a class=\"markdownIt-Anchor\" href=\"#423获取实例化对象\">#</a> 4.23 获取实例化对象</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665228519282-24bb3a7e-7671-4928-bedb-4e9e66f77798.png\" alt=\"img\"></p>\n<h3 id=\"43实例化工厂实例化了解\"><a class=\"markdownIt-Anchor\" href=\"#43实例化工厂实例化了解\">#</a> 4.3 实例化工厂实例化（了解）</h3>\n<h2 id=\"5spring-ioc-手动装配注入\"><a class=\"markdownIt-Anchor\" href=\"#5spring-ioc-手动装配注入\">#</a> 5.Spring IOC 手动装配（注入）</h2>\n<h3 id=\"51set方法注入\"><a class=\"markdownIt-Anchor\" href=\"#51set方法注入\">#</a> 5.1set 方法注入</h3>\n<h4 id=\"511业务对象-javabean\"><a class=\"markdownIt-Anchor\" href=\"#511业务对象-javabean\">#</a> 5.11 业务对象 JavaBean</h4>\n<h4 id=\"512常用对象和基本类型\"><a class=\"markdownIt-Anchor\" href=\"#512常用对象和基本类型\">#</a> 5.12 常用对象和基本类型</h4>\n<h4 id=\"513集合类型和属性对象\"><a class=\"markdownIt-Anchor\" href=\"#513集合类型和属性对象\">#</a> 5.13 集合类型和属性对象</h4>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665228976393-88bff235-f646-4874-86ac-d47707f22698.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665229022850-c168b583-cdeb-4909-8d33-7dc9afc714ba.png\" alt=\"img\"></p>\n<h3 id=\"52构造器注入\"><a class=\"markdownIt-Anchor\" href=\"#52构造器注入\">#</a> 5.2<strong> 构造器注入</strong></h3>\n<h4 id=\"521如何使用\"><a class=\"markdownIt-Anchor\" href=\"#521如何使用\">#</a> 5.21 如何使用</h4>\n<p>注意：提供带参构造器</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665229519391-617c49ac-ad21-4a05-adc6-2c6927e797c4.png\" alt=\"img\"></p>\n<p>使用<strong> constructor-arg 标签</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665229574832-36b4cde7-4098-4d59-8748-18a7dfc87123.png\" alt=\"img\"></p>\n<h4 id=\"522循环依赖问题\"><a class=\"markdownIt-Anchor\" href=\"#522循环依赖问题\">#</a> 5.22<strong> 循环依赖问题</strong></h4>\n<p>5.221 循环问题产生的原因：</p>\n<p>Bean 通过构造器注入，之间彼此相互依赖对方导致 bean 无法实例 化。</p>\n<p>5.222 解决方案：</p>\n<p>将构造器注入改为 set 方法注入</p>\n<p>5.3 静态工厂注入（了解）</p>\n<p>5.4 实例化工厂注入（了解）</p>\n<h3 id=\"55p名称空间的使用\"><a class=\"markdownIt-Anchor\" href=\"#55p名称空间的使用\">#</a> 5.5p 名称空间的使用</h3>\n<p>spring2.5 以后，为了简化 setter 方法属性注入，引用 p 名称空间的概念，可以将 子元素，简化为元素属性配置。</p>\n<ol>\n<li>属性字段提供 set 方法</li>\n<li>在配置文件 spring.xml 引入 p 名称空间</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665231432178-fe0b1bca-b80c-4d01-b7d0-07140fef6373.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665231473622-5a167d9a-56b3-4b2b-b133-f91efb10170a.png\" alt=\"img\"></p>\n<h2 id=\"6-spring-ioc-自动装配\"><a class=\"markdownIt-Anchor\" href=\"#6-spring-ioc-自动装配\">#</a> 6. <strong>Spring IOC 自动装配</strong></h2>\n<h3 id=\"61注解方式注入-bean\"><a class=\"markdownIt-Anchor\" href=\"#61注解方式注入-bean\">#</a> 6.1 注解方式注入 Bean</h3>\n<p>对于 bean 的注入，除了使用 xml 配置以外，可以使用注解配置。 注解的配置，可以简化配置文件，提高开发的速度，使程序看上去 更简洁。对于注解的解释，Spring 对于注解有专门的解释器，对定</p>\n<p>义的注解进行解析，实现对应 bean 对象的注入。通过<strong>反射技术实 现</strong>。</p>\n<h3 id=\"62准备环境\"><a class=\"markdownIt-Anchor\" href=\"#62准备环境\">#</a> 6.2<strong> 准备环境</strong></h3>\n<p>6.21 修改配置文件</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665230880043-0c3c41b9-4476-427d-87c5-32670497eaf2.png\" alt=\"img\"></p>\n<p>6.22 开启自动化注入</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665230894873-c9c2e236-2115-40f8-907e-13d79344d7a3.png\" alt=\"img\"></p>\n<p>6.23. 给注入的 bean 对象添加注解</p>\n<h3 id=\"63resource注解\"><a class=\"markdownIt-Anchor\" href=\"#63resource注解\">#</a> 6.3@Resource 注解</h3>\n<p>@Resource 注解实现自动注入 （反射）</p>\n<ol>\n<li>注解默认通过属性字段名称查找对应的 bean 对象（属性字段名称与 bean 标签的 id 属性值一致）</li>\n<li>如果属性字段名称不一样，则会通过类型（Class）类型</li>\n<li>属性字段可以提供 set 方法 也可以不提供</li>\n<li>注解可以声明在属性字段上 或 set 方法级别</li>\n<li>可以设置注解的 name 属性，name 属性值要与 bean 标签的 id 属性值一致（如果设置了 name 属性，则会按照 name 属性查询 bean 对象）</li>\n<li>当注入接口时，如果接口只有一个实现类，则正常实例化；如果接口有多个实现类，则需要使用 name 属性指定需要被实例化的 bean 对象</li>\n</ol>\n<h3 id=\"64autowired注解\"><a class=\"markdownIt-Anchor\" href=\"#64autowired注解\">#</a> 6.4**@Autowired 注解 **</h3>\n<p>@Autowired 注解实现自动化注入</p>\n<ol>\n<li>注解默认使用类型（Class 类型）查找 bean 对象，与属性字段名称没有关系</li>\n<li>属性字段可以提供 set 方法 也可以不提供</li>\n<li>注解可以声明在属性级别 或 set 方法级别</li>\n<li>如果想要通过指定名称查找 bean 对象，需要结合 @Qualifier 使用（通过设置 value 属性值查找，value 属性值要 bean 标签的 id 属性值保持一致）</li>\n</ol>\n<h2 id=\"7-spring-ioc-扫描器\"><a class=\"markdownIt-Anchor\" href=\"#7-spring-ioc-扫描器\">#</a> 7. <strong>Spring IOC 扫描器</strong></h2>\n<p>实际的开发中，bean 的数量非常多，采用手动配置 bean 的方式已 无法满足生产需要，Spring 这时候同样提供了扫描的方式，对扫描 到的 bean 对象的统一管理，简化开发配置，提高开发效率。</p>\n<h3 id=\"71-设置自动化扫描的范围\"><a class=\"markdownIt-Anchor\" href=\"#71-设置自动化扫描的范围\">#</a> 7.1. 设置自动化扫描的范围</h3>\n<p>如果 bean 对象未在扫描范围范围，即使声明了注解，也不会被实例化</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/26248221/1665231633125-bb045757-f35c-4e42-9773-63646b7ce0d5.png\" alt=\"img\"></p>\n<h3 id=\"72需要被实例化的javabean的类上添加指定的注解注解声明在类级别\"><a class=\"markdownIt-Anchor\" href=\"#72需要被实例化的javabean的类上添加指定的注解注解声明在类级别\">#</a> 7.2 需要被实例化的 JavaBean 的类上添加指定的注解（注解声明在类级别）</h3>\n<p>（ben 对象的 id 属性默认是 类的首字母小写）</p>\n<p>Dao 层：<br>\n@Repository<br>\nService 层：<br>\n@Service<br>\nController 层：<br>\n@Controller<br>\n 任意类：<br>\n@Component</p>\n",
            "tags": [
                "spring"
            ]
        }
    ]
}