<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>spring-ioc</title>
    <url>/2022/10/08/spring-ioc/</url>
    <content><![CDATA[<h2 id="1spring-框架"><a class="markdownIt-Anchor" href="#1spring-框架">#</a> 1.Spring 框架</h2>
<h3 id="111spring-框架概念"><a class="markdownIt-Anchor" href="#111spring-框架概念">#</a> 1.11<strong>Spring 框架概念</strong></h3>
<p>Spring 是众多开源 java 项目中的一员，基于分层的 javaEE 应用一站 式轻量级开源框架，主要核心是 IOC（控制反转 / 依赖注入）与 AOP（面向切面）两大技术，实现项目在开发过程中的轻松解耦， 提高项目的开发效率。</p>
<h3 id="112-spring-源码架构"><a class="markdownIt-Anchor" href="#112-spring-源码架构">#</a> 1.12 <strong>Spring 源码架构</strong></h3>
<p>1. 核心容器：</p>
<p>Spring-beans 和 Spring-core 模块是 Spring 框架的核心模块，包含控制反转（Inversion of Control, IoC）和依赖注入（Dependency Injection, DI）, 核心容器提供 Spring 框架的基本功能。</p>
<p>1…1 核心容器的主要组件是 BeanFactory，工厂模式的实现。BeanFactory 使用控制反转（IOC） 思想将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>
<p>1.2 Spring 上下文 Spring Context：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</p>
<p>1.3 Spring-Expression 模块是统一表达式语言（unified EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等。它的语法类似于传统 EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。</p>
<p>2.Spring-AOP：</p>
<p>Spring-aop 是 Spring 的另一个核心模块，在 Spring 中，他是以 JVM 的动态代理技术为基础，然后设计出了一系列的 Aop 横切实现，比如前置通知、返回通知、异常通知等。通过其配置管理特性，Spring AOP 模块直接将面向切面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。</p>
<p>\3. Spring Data Access (数据访问)：</p>
<p>由 Spring-jdbc、Spring-tx、Spring-orm、Spring-jms 和 Spring-oxm 5 个模块组成</p>
<p>3.1Spring-jdbc 模块是 Spring 提供的 JDBC 抽象框架的主要实现模块，用于简化 Spring JDBC。<br>
3.2Spring-tx 模块是 SpringJDBC 事务控制实现模块。使用 Spring 框 架，它对事务做了很好的封装，通过它的 Aop 配置，可以灵活的 配置在任何一层。                                                                                                                      3.3Spring-Orm 模块是 ORM 框架支持模块，主要集成 hibernate, Java Persistence API (JPA) 和 Java Data Objects (JDO) 用于资 源管理、数据访问对象 (DAO) 的实现和事务策略。                                                            3.4Spring-Jms 模块（Java Messaging Service）能够发送和接受信息。                                                                  3.5Spring-Oxm 模块主要提供一个抽象层以支撑 OXM（OXM 是 Object-to-XML-Mapping 的缩写，它是一个 O/M-mapper，将 java 对象映射成 XML 数据，或者将 XML 数据映射成 java 对 象），例如：JAXB, Castor, XMLBeans, JiBX 和 XStream 等。</p>
<p><a href="http://4.Web">4.Web</a> 模块：</p>
<p>由 Spring-web、Spring-webmvc、Spring-websocket 和 Spring-webmvc-portlet 4 个模块组成，Web 上下<br>
文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p>
<p>5. 报文发送：</p>
<p>Spring-messaging 模块。Spring-messaging 是 Spring4 新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用。</p>
<p>6. 单元测试：</p>
<p>Spring-test 模块。Spring-test 模块主要为测试提供支持</p>
<h3 id="113spring-框架环境搭建"><a class="markdownIt-Anchor" href="#113spring-框架环境搭建">#</a> <strong>1.13Spring 框架环境搭建</strong></h3>
<p>重要的点</p>
<h4 id="1添加-spring-框架的依赖坐标"><a class="markdownIt-Anchor" href="#1添加-spring-框架的依赖坐标">#</a> 1. 添加 Spring 框架的依赖坐标</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665221631008-f48d52fd-03a1-4bb8-a50b-ff15cdfd214d.png" alt="img"></p>
<h4 id="2添加spring-配置文件springxml拷贝官-网文档提供的模板内容到-xml-中"><a class="markdownIt-Anchor" href="#2添加spring-配置文件springxml拷贝官-网文档提供的模板内容到-xml-中">#</a> 2. 添加 Spring 配置文件（spring.xml）, 拷贝官 网文档提供的模板内容到 xml 中。</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665221806317-422fe846-0dd5-4476-8a1a-425e375cd552.png" alt="img"></p>
<h4 id="3配置-bean-到-xml-中把对应-bean-纳入到-spring-容器来管理"><a class="markdownIt-Anchor" href="#3配置-bean-到-xml-中把对应-bean-纳入到-spring-容器来管理">#</a> 3. 配置 bean 到 xml 中，把对应 bean 纳入到 Spring 容器来管理</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665221824191-1d929ab7-3a30-4a1d-aab3-175bfe01fdd5.png" alt="img"></p>
<h4 id="4加载配置文件获取实例化对象"><a class="markdownIt-Anchor" href="#4加载配置文件获取实例化对象">#</a> 4. 加载配置文件，获取实例化对象</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665221724576-003cc342-8c0f-4853-a5d6-40941868a417.png" alt="img"></p>
<h2 id="2spring-ioc容器bean对象实例化模拟了解"><a class="markdownIt-Anchor" href="#2spring-ioc容器bean对象实例化模拟了解">#</a> 2.<strong>Spring IOC 容器 Bean 对象实例化模拟 (了解)</strong></h2>
<p>2.1 定义 Bean 属性对象</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222324107-34bba415-3105-4921-8cd0-b0c94f649e69.png" alt="img"></p>
<p>2.2 添加 dom4j 坐标依赖</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222359384-ae8becde-bd0e-49ce-b0e0-923c60f41b52.png" alt="img"></p>
<p>2.3 准备自定义配置文件</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222416685-e1cd3817-715f-49d4-befa-33603c8970e8.png" alt="img"></p>
<p>2.4 定义 Bean 工厂接口</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222449100-2f187ec4-f2f7-457a-b9f7-917b373cac3f.png" alt="img"></p>
<p>2.5 定义 Bean 接口的实现类</p>
<p><a href="https://www.yuque.com/attachments/yuque/0/2022/java/26248221/1665222643302-eeb3e3a6-9200-4bf5-8871-a8254b75af17.java">📎MyClassPathXmlApplicationContext.java</a></p>
<p>2.6 测试自定义 IOC 容器</p>
<h2 id="3-spring-配置文件加载"><a class="markdownIt-Anchor" href="#3-spring-配置文件加载">#</a> 3. <strong>Spring 配置文件加载</strong></h2>
<h3 id="31根据相对路径加载资源最常用"><a class="markdownIt-Anchor" href="#31根据相对路径加载资源最常用">#</a> 3.1 根据相对路径加载资源（最常用）</h3>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665223051864-1f4f4e54-6db6-4776-b8e0-ec7e3c9ea99d.png" alt="img"></p>
<p>3.2 根据绝对路径加载资源（了解）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665223062429-af64d946-0665-45a6-b73c-4d80d355756a.png" alt="img"></p>
<h3 id="33-spring-多配置文件加载"><a class="markdownIt-Anchor" href="#33-spring-多配置文件加载">#</a> 3.3 Spring 多配置文件加载</h3>
<h4 id="331可变参数传入多个文件名"><a class="markdownIt-Anchor" href="#331可变参数传入多个文件名">#</a> 3.31 可变参数，传入多个文件名</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222985580-8a35e9ad-015e-4260-911f-dcd277854445.png" alt="img"></p>
<h4 id="332通过总的配置文件import其他配置文件"><a class="markdownIt-Anchor" href="#332通过总的配置文件import其他配置文件">#</a> 3.32 通过总的配置文件 import 其他配置文件</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665222999304-80850582-c1e5-44e5-8890-621d5b974e46.png" alt="img"></p>
<h2 id="4spring-ioc-容器-bean-对象实例化"><a class="markdownIt-Anchor" href="#4spring-ioc-容器-bean-对象实例化">#</a> 4.<strong>Spring IOC 容器 Bean 对象实例化</strong></h2>
<h3 id="41构造器实例化"><a class="markdownIt-Anchor" href="#41构造器实例化">#</a> 4.1 构造器实例化</h3>
<p>注意：通过默认构造器创建 空构造方法必须存在 否则创建失败</p>
<h3 id="42静态工厂实例化了解"><a class="markdownIt-Anchor" href="#42静态工厂实例化了解">#</a> 4.2 静态工厂实例化（了解）</h3>
<h4 id="421定义静态工厂类"><a class="markdownIt-Anchor" href="#421定义静态工厂类">#</a> 4.21 定义静态工厂类</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665226796464-bcc108cc-b735-461b-9ec5-d3a8b9017bf6.png" alt="img"></p>
<h4 id="422设置配置文件-springxml"><a class="markdownIt-Anchor" href="#422设置配置文件-springxml">#</a> 4.22 设置配置文件 spring.xml</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665226720396-cfcd0982-12b8-4d05-99f0-add5c7f7e485.png" alt="img"></p>
<h4 id="423获取实例化对象"><a class="markdownIt-Anchor" href="#423获取实例化对象">#</a> 4.23 获取实例化对象</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665228519282-24bb3a7e-7671-4928-bedb-4e9e66f77798.png" alt="img"></p>
<h3 id="43实例化工厂实例化了解"><a class="markdownIt-Anchor" href="#43实例化工厂实例化了解">#</a> 4.3 实例化工厂实例化（了解）</h3>
<h2 id="5spring-ioc-手动装配注入"><a class="markdownIt-Anchor" href="#5spring-ioc-手动装配注入">#</a> 5.Spring IOC 手动装配（注入）</h2>
<h3 id="51set方法注入"><a class="markdownIt-Anchor" href="#51set方法注入">#</a> 5.1set 方法注入</h3>
<h4 id="511业务对象-javabean"><a class="markdownIt-Anchor" href="#511业务对象-javabean">#</a> 5.11 业务对象 JavaBean</h4>
<h4 id="512常用对象和基本类型"><a class="markdownIt-Anchor" href="#512常用对象和基本类型">#</a> 5.12 常用对象和基本类型</h4>
<h4 id="513集合类型和属性对象"><a class="markdownIt-Anchor" href="#513集合类型和属性对象">#</a> 5.13 集合类型和属性对象</h4>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665228976393-88bff235-f646-4874-86ac-d47707f22698.png" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665229022850-c168b583-cdeb-4909-8d33-7dc9afc714ba.png" alt="img"></p>
<h3 id="52构造器注入"><a class="markdownIt-Anchor" href="#52构造器注入">#</a> 5.2<strong> 构造器注入</strong></h3>
<h4 id="521如何使用"><a class="markdownIt-Anchor" href="#521如何使用">#</a> 5.21 如何使用</h4>
<p>注意：提供带参构造器</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665229519391-617c49ac-ad21-4a05-adc6-2c6927e797c4.png" alt="img"></p>
<p>使用<strong> constructor-arg 标签</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665229574832-36b4cde7-4098-4d59-8748-18a7dfc87123.png" alt="img"></p>
<h4 id="522循环依赖问题"><a class="markdownIt-Anchor" href="#522循环依赖问题">#</a> 5.22<strong> 循环依赖问题</strong></h4>
<p>5.221 循环问题产生的原因：</p>
<p>Bean 通过构造器注入，之间彼此相互依赖对方导致 bean 无法实例 化。</p>
<p>5.222 解决方案：</p>
<p>将构造器注入改为 set 方法注入</p>
<p>5.3 静态工厂注入（了解）</p>
<p>5.4 实例化工厂注入（了解）</p>
<h3 id="55p名称空间的使用"><a class="markdownIt-Anchor" href="#55p名称空间的使用">#</a> 5.5p 名称空间的使用</h3>
<p>spring2.5 以后，为了简化 setter 方法属性注入，引用 p 名称空间的概念，可以将 子元素，简化为元素属性配置。</p>
<ol>
<li>属性字段提供 set 方法</li>
<li>在配置文件 spring.xml 引入 p 名称空间</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665231432178-fe0b1bca-b80c-4d01-b7d0-07140fef6373.png" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665231473622-5a167d9a-56b3-4b2b-b133-f91efb10170a.png" alt="img"></p>
<h2 id="6-spring-ioc-自动装配"><a class="markdownIt-Anchor" href="#6-spring-ioc-自动装配">#</a> 6. <strong>Spring IOC 自动装配</strong></h2>
<h3 id="61注解方式注入-bean"><a class="markdownIt-Anchor" href="#61注解方式注入-bean">#</a> 6.1 注解方式注入 Bean</h3>
<p>对于 bean 的注入，除了使用 xml 配置以外，可以使用注解配置。 注解的配置，可以简化配置文件，提高开发的速度，使程序看上去 更简洁。对于注解的解释，Spring 对于注解有专门的解释器，对定</p>
<p>义的注解进行解析，实现对应 bean 对象的注入。通过<strong>反射技术实 现</strong>。</p>
<h3 id="62准备环境"><a class="markdownIt-Anchor" href="#62准备环境">#</a> 6.2<strong> 准备环境</strong></h3>
<p>6.21 修改配置文件</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665230880043-0c3c41b9-4476-427d-87c5-32670497eaf2.png" alt="img"></p>
<p>6.22 开启自动化注入</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665230894873-c9c2e236-2115-40f8-907e-13d79344d7a3.png" alt="img"></p>
<p>6.23. 给注入的 bean 对象添加注解</p>
<h3 id="63resource注解"><a class="markdownIt-Anchor" href="#63resource注解">#</a> 6.3@Resource 注解</h3>
<p>@Resource 注解实现自动注入 （反射）</p>
<ol>
<li>注解默认通过属性字段名称查找对应的 bean 对象（属性字段名称与 bean 标签的 id 属性值一致）</li>
<li>如果属性字段名称不一样，则会通过类型（Class）类型</li>
<li>属性字段可以提供 set 方法 也可以不提供</li>
<li>注解可以声明在属性字段上 或 set 方法级别</li>
<li>可以设置注解的 name 属性，name 属性值要与 bean 标签的 id 属性值一致（如果设置了 name 属性，则会按照 name 属性查询 bean 对象）</li>
<li>当注入接口时，如果接口只有一个实现类，则正常实例化；如果接口有多个实现类，则需要使用 name 属性指定需要被实例化的 bean 对象</li>
</ol>
<h3 id="64autowired注解"><a class="markdownIt-Anchor" href="#64autowired注解">#</a> 6.4**@Autowired 注解 **</h3>
<p>@Autowired 注解实现自动化注入</p>
<ol>
<li>注解默认使用类型（Class 类型）查找 bean 对象，与属性字段名称没有关系</li>
<li>属性字段可以提供 set 方法 也可以不提供</li>
<li>注解可以声明在属性级别 或 set 方法级别</li>
<li>如果想要通过指定名称查找 bean 对象，需要结合 @Qualifier 使用（通过设置 value 属性值查找，value 属性值要 bean 标签的 id 属性值保持一致）</li>
</ol>
<h2 id="7-spring-ioc-扫描器"><a class="markdownIt-Anchor" href="#7-spring-ioc-扫描器">#</a> 7. <strong>Spring IOC 扫描器</strong></h2>
<p>实际的开发中，bean 的数量非常多，采用手动配置 bean 的方式已 无法满足生产需要，Spring 这时候同样提供了扫描的方式，对扫描 到的 bean 对象的统一管理，简化开发配置，提高开发效率。</p>
<h3 id="71-设置自动化扫描的范围"><a class="markdownIt-Anchor" href="#71-设置自动化扫描的范围">#</a> 7.1. 设置自动化扫描的范围</h3>
<p>如果 bean 对象未在扫描范围范围，即使声明了注解，也不会被实例化</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26248221/1665231633125-bb045757-f35c-4e42-9773-63646b7ce0d5.png" alt="img"></p>
<h3 id="72需要被实例化的javabean的类上添加指定的注解注解声明在类级别"><a class="markdownIt-Anchor" href="#72需要被实例化的javabean的类上添加指定的注解注解声明在类级别">#</a> 7.2 需要被实例化的 JavaBean 的类上添加指定的注解（注解声明在类级别）</h3>
<p>（ben 对象的 id 属性默认是 类的首字母小写）</p>
<p>Dao 层：<br>
@Repository<br>
Service 层：<br>
@Service<br>
Controller 层：<br>
@Controller<br>
 任意类：<br>
@Component</p>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>redis简单介绍</title>
    <url>/2022/10/04/redis%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="1什么是redis"><a class="markdownIt-Anchor" href="#1什么是redis">#</a> 1. 什么是 Redis</h3>
<p>Redis (Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD 许可）高性能非关系型（NoSQL）的键值对数据库。Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA 脚本、LRU 驱动事件、多种集群方案。</p>
<h3 id="2redis有哪些优缺点"><a class="markdownIt-Anchor" href="#2redis有哪些优缺点">#</a> 2.Redis 有哪些优缺点</h3>
<p>优点:</p>
<p>2.1 读写性能优异， Redis 能读的速度是 110000 次 /s，写的速度是 81000 次 /s。</p>
<p>2.2 支持数据持久化，支持 AOF 和 RDB 两种持久化方式。</p>
<p>2.3 支持事务，Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作合并后的原子性执行。</p>
<p>2.4 数据结构丰富，除了支持 string 类型的 value 外还支持 hash、set、zset、list 等数据结构。</p>
<p>2.5 支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</p>
<p>缺点:</p>
<p>2.1 数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。</p>
<p>2.2Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。</p>
<p>2.3 主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。</p>
<p>2.4Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</p>
<p>为什么要用 Redis / 为什么要用缓存</p>
<h3 id="3为什么要用-redis-为什么要用缓存"><a class="markdownIt-Anchor" href="#3为什么要用-redis-为什么要用缓存">#</a> 3. 为什么要用 Redis / 为什么要用缓存</h3>
<p>3.1 高性能：</p>
<p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p>
<p>3.2 高并发：</p>
<p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p>
<h3 id="4redis有哪些数据类型"><a class="markdownIt-Anchor" href="#4redis有哪些数据类型">#</a> 4.Redis 有哪些数据类型</h3>
<p>Redis 主要有 5 种数据类型，包括 String，List，Set，Zset，Hash，满足大部分的使用要求</p>
<p><a href="http://t.csdn.cn/dhFOX">http://t.csdn.cn/dhFOX</a></p>
<h3 id="5redis-常见的使用场景"><a class="markdownIt-Anchor" href="#5redis-常见的使用场景">#</a> 5.Redis 常见的使用场景</h3>
<p>一、缓存</p>
<p>作为 Key-Value 形态的内存数据库，Redis 最先会被想到的应用场景便是作为数据缓存。目前这几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力，而使用 Redis 缓存数据也非常简单，只需要通过 string 类型将序列化后的对象存起来即可，不过也有一些需要注意的地方：</p>
<p>（一）必须保证不同对象的 key 不会重复，并且使 key 尽量短，一般使用类名（表名）加主键拼接而成。</p>
<p>（二）选择一个优秀的序列化方式也很重要，目的是提高序列化的效率和减少内存占用。</p>
<p>（三）缓存内容与数据库的一致性，这里一般有两种做法：</p>
<p>①只在数据库查询后将对象放入缓存，如果对象发生了修改或删除操作，直接清除对应缓存（或设为过期）。</p>
<p>②在数据库新增和查询后将对象放入缓存，修改后更新缓存，删除后清除对应缓存（或设为过期）。</p>
<p>二、排行榜</p>
<p>很多网站目前都有排行榜的应用，如淘宝的年度 / 每日销量榜单、商品按时间的上新排行榜等。利用 Redis 的 zset 结构能实现各种复杂的排行榜应用。比如使用 zset 和一个计算热度的算法便可以轻松打造一个热度排行榜，zrevrangebyscore 可以得到以分数倒序排列的序列，zrank 可以得到一个成员在该排行榜的位置（是分数正序排列时的位置，如果要获取倒序排列时的位置需要用 zcard-zrank）。</p>
<p>三、计数器</p>
<p>什么是计数器，如文章的阅读量、微博点赞数、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给 + 1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。我们可以先写入 Redis 再定时同步到数据库，Redis 提供的 incr 命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。</p>
<p>计数功能应该是最适合 Redis 的使用场景之一了，因为它高频率读写的特征可以完全发挥 Redis 作为内存数据库的高效。在 Redis 的数据结构中，string、hash 和 sorted set 都提供了 incr 方法用于原子性的自增操作，下面举例说明一下它们各自的使用场景：</p>
<p>（1）如果应用需要显示每天的注册用户数，便可以使用 string 作为计数器，设定一个名为 REGISTERED_COUNT_TODAY 的 key，并在初始化时给它设置一个到凌晨 0 点的过期时间，每当用户注册成功后便使用 incr 命令使该 key 增长 1，同时当每天凌晨 0 点后，这个计数器都会因为 key 过期使值清零。</p>
<p>（2）每条微博都有点赞数、评论数、转发数和浏览数四条属性，这时用 hash 进行计数会更好，将该计数器的 key 设为 weibo:weibo_id，hash 的 field 为 like_number、comment_number、forward_number 和 view_number，在对应操作后通过 hincrby 使 hash 中的 field 自增。</p>
<p>（3）如果应用有一个发帖排行榜的功能，选择 sorted set 更合适，将集合的 key 设为 POST_RANK。当用户发帖后，使用 zincrby 将该用户 id 的 score 增长 1。sorted set 会重新进行排序，用户所在排行榜的位置也就会得到实时的更新。</p>
<p>四、限流</p>
<p>在某些秒杀活动中，瞬间会有大量的用户请求涌入，而且大概率也会出现同一用户不断刷新页面或者其他操作来发送大量请求的情况，这时候我们就可以采取限流措施。那如何实现限流呢？我们可以利用 Redis 的 incr 方法，以访问者的 ip 和其他信息作为 key，访问一次增加一次计数，当同一用户的访问次数超过我们预先设定的次数则返回提示信息（比如提示用户操作过于频繁，一定时间之后再重新操作等等）。</p>
<p>五、分布式会话</p>
<p>集群模式下，在应用不多的情况下一般使用容器自带的 session 复制功能就能满足，当在应用增多且相对复杂的系统中，一般都会搭建以 Redis 等内存数据库为中心的 session 服务，session 不再由容器管理，而是由 session 服务及内存数据库管理。</p>
<p>————————————————</p>
<p>版权声明：本文为 CSDN 博主「努力努力再努力 c.」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p>
<p>原文链接：<a href="https://blog.csdn.net/m0_51358164/article/details/125927452">https://blog.csdn.net/m0_51358164/article/details/125927452</a></p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>云日记</title>
    <url>/2022/10/05/%E4%BA%91%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="云日记项目"><a class="markdownIt-Anchor" href="#云日记项目">#</a> 云日记项目</h1>
<h1 id="1项目介绍及环境搭建"><a class="markdownIt-Anchor" href="#1项目介绍及环境搭建">#</a> 1. 项目介绍及环境搭建</h1>
<h2 id="11项目简介"><a class="markdownIt-Anchor" href="#11项目简介">#</a> 1.1 项目简介</h2>
<p>云 R 记软件就是用于记录日常生活点滴。一款跨平台的简单快速的个人记事备忘工具，并且能够实现 PC、移动设备和云端之间的信息同步，简洁高效。将会议记录、日程安排、生活备忘，奇思妙想、快乐趣事以及任何突发灵感都可快速记录到系统中。</p>
<h2 id="12技术选型"><a class="markdownIt-Anchor" href="#12技术选型">#</a> 1.2 技术选型</h2>
<p>本系统采用 B/S 架构，使用 BootStrap + Jsp + Servlet + MySQL+ Tomcat 开发，使用 Maven 构建，采用 Junit 单元测试、Log4j 搭建日志、使用 POI 导入导出报表，操作 DB 使用 DBUtil。</p>
<h2 id="13核心模块"><a class="markdownIt-Anchor" href="#13核心模块">#</a> 1.3 核心模块</h2>
<p>本项目包含用户模块、类型模块、云记模块、数据报表、首页模块这几个核心模块，核心主旨是掌握功能的分析以及前后台数据交互。</p>
<h2 id="14具体功能"><a class="markdownIt-Anchor" href="#14具体功能">#</a> 1.4 具体功能</h2>
<h2 id="15技术细节"><a class="markdownIt-Anchor" href="#15技术细节">#</a> 1.5 技术细节</h2>
<p>增删改查<br>
免登录：Session 和 Cookie<br>
 非法访问：过滤器 Filter<br>
 文件上传<br>
分页<br>
 Ajax：Dom 操作<br>
富文本编辑器</p>
<h2 id="16数据库设计"><a class="markdownIt-Anchor" href="#16数据库设计">#</a> 1.6 数据库设计</h2>
<p>用户表 类型表 云记表</p>
<h2 id="17环境搭建"><a class="markdownIt-Anchor" href="#17环境搭建">#</a> 1.7 环境搭建</h2>
<h3 id="171新建项目"><a class="markdownIt-Anchor" href="#171新建项目">#</a> 1.71 新建项目</h3>
<p>选择 “File” ——&gt; “New” ——&gt; “Project…” ，选择 “Maven”，设置 JDK 版本，选择 Maven Web 项目的模板</p>
<h3 id="172设置项目信息"><a class="markdownIt-Anchor" href="#172设置项目信息">#</a> 1.72 设置项目信息</h3>
<p>设置项目的名称、存放的工作空间，以及对应的 GroupId</p>
<h3 id="173修改配置"><a class="markdownIt-Anchor" href="#173修改配置">#</a> 1.73 修改配置</h3>
<p>在 pomx.xml 配置文件中，修改配置、添加依赖与插件</p>
<h2 id="18maven导入的jar包"><a class="markdownIt-Anchor" href="#18maven导入的jar包">#</a> 1.8maven 导入的 jar 包</h2>
<p>junit 测试<br>
 web servlet<br>
log4j 日志打印相关的 jar<br>
mysql 驱动包<br>
 fastjson  json 依赖<br>
 hutool 工具集<br>
 commons-io 依赖<br>
添加百度编辑器 ueditor 支持<br>
 jstl 依赖<br>
 servlet-api<br>
lombok 插件 注解生成 getter-setter</p>
<h2 id="19单元测试"><a class="markdownIt-Anchor" href="#19单元测试">#</a> 1.9 单元测试</h2>
<p>git config --global --unset https.proxy<br>
 在 src/main 目录下，新建 test 目录（测试目录），新建 java 目录（测试源文件夹）</p>
<p>添加 @Test 对应测试方法可独立运行</p>
<h2 id="1x配置文件"><a class="markdownIt-Anchor" href="#1x配置文件">#</a> 1.x 配置文件</h2>
<p>在 src/main/resources 目录下，新建 log4j.properties 文件</p>
<h2 id="2用户模块"><a class="markdownIt-Anchor" href="#2用户模块">#</a> 2. 用户模块</h2>
<p><a href="https://www.yuque.com/docs/share/deb2abc8-02c8-467c-ad78-019c70dab1f3?#">https://www.yuque.com/docs/share/deb2abc8-02c8-467c-ad78-019c70dab1f3?#</a> 《用户模块》</p>
<p>2.1 用户登录</p>
<p>2.2 用户退出</p>
<p>2.3 验证用户名的唯一性</p>
<p>2.4 加载头像</p>
<p>2.5 修改用户信息</p>
<p>2.6 非法访问拦截</p>
<p>2.7 免密登录</p>
<h2 id="3类型模块"><a class="markdownIt-Anchor" href="#3类型模块">#</a> 3. 类型模块</h2>
<p><a href="https://www.yuque.com/docs/share/77a381bf-80e0-42f8-846c-e8e4f5eeb2bd?#">https://www.yuque.com/docs/share/77a381bf-80e0-42f8-846c-e8e4f5eeb2bd?#</a> 《云记类型》</p>
<p>3.1 查询类型的列表</p>
<p>3.2 验证类型名的唯一性</p>
<p>3.3 添加类型，修改类型</p>
<p>3.4 删除类型</p>
<h2 id="4云记模块"><a class="markdownIt-Anchor" href="#4云记模块">#</a> 4. 云记模块</h2>
<p><a href="https://www.yuque.com/docs/share/01955cf2-bb23-4059-8e14-1ba665209533?#">https://www.yuque.com/docs/share/01955cf2-bb23-4059-8e14-1ba665209533?#</a> 《云记模块》</p>
<p>4.1 添加、修改云记</p>
<p>4.2 删除云记</p>
<p>4.3 分页查询云记列表</p>
<p>4.4 查询云记详情</p>
<h2 id="5云记主页"><a class="markdownIt-Anchor" href="#5云记主页">#</a> 5. 云记主页</h2>
<p><a href="https://www.yuque.com/docs/share/4d1610f7-687b-4575-87a8-23a2bd19e491?#">https://www.yuque.com/docs/share/4d1610f7-687b-4575-87a8-23a2bd19e491?#</a> 《云记主页》</p>
<p>5.1 显示用户信息</p>
<p>5.2 分页查询云记列表</p>
<p>5.3 多条件查询云记列表</p>
<h2 id="6数据报表"><a class="markdownIt-Anchor" href="#6数据报表">#</a> 6. 数据报表</h2>
<p><a href="https://www.yuque.com/docs/share/b7405355-305e-4d9e-9672-77a6c6f87877?#">https://www.yuque.com/docs/share/b7405355-305e-4d9e-9672-77a6c6f87877?#</a> 《6 数据报表》</p>
<p>6.1 后端实现</p>
<p>6.2 前端</p>
]]></content>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
</search>
